{"ast":null,"code":"import { testKeys, getKeyProgress } from '@/api/coordinator';\nimport KeyTestResultTable from '@/components/KeyTestResultTable.vue';\nimport StatusBadge from '@/components/StatusBadge.vue';\nexport default {\n  name: 'KeyTest',\n  components: {\n    KeyTestResultTable,\n    StatusBadge\n  },\n  data() {\n    return {\n      results: null,\n      loading: false,\n      progress: null\n    };\n  },\n  async mounted() {\n    await this.fetchProgress();\n  },\n  methods: {\n    async fetchProgress() {\n      try {\n        const res = await getKeyProgress();\n        this.progress = res.data;\n      } catch (e) {\n        console.error('获取密钥进度失败:', e);\n      }\n    },\n    async testAll() {\n      this.loading = true;\n      try {\n        const res = await testKeys({\n          test_types: ['public_key', 'relinearization_key', 'galois_keys']\n        });\n        this.results = res.data.test_results;\n      } catch (e) {\n        alert('测试失败: ' + (e.response?.data?.message || e.message));\n      } finally {\n        this.loading = false;\n      }\n    }\n  }\n};","map":{"version":3,"names":["testKeys","getKeyProgress","KeyTestResultTable","StatusBadge","name","components","data","results","loading","progress","mounted","fetchProgress","methods","res","e","console","error","testAll","test_types","test_results","alert","response","message"],"sources":["D:\\down\\MPHEDEV\\encryption_co\\src\\views\\KeyTest.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <h2>密钥测试</h2>\r\n    \r\n    <!-- 密钥进度显示 -->\r\n    <div v-if=\"progress\" class=\"progress-section\">\r\n      <h3>密钥收集进度</h3>\r\n      <div class=\"progress-grid\">\r\n        <div class=\"progress-item\">\r\n          <strong>公钥:</strong> {{ progress.public_key.received_shares }}/{{ progress.public_key.total_expected }}\r\n          <StatusBadge :status=\"progress.public_key.ready ? 'ready' : 'pending'\" />\r\n        </div>\r\n        <div class=\"progress-item\">\r\n          <strong>私钥:</strong> {{ progress.secret_key.received_shares }}/{{ progress.secret_key.total_expected }}\r\n          <StatusBadge :status=\"progress.secret_key.ready ? 'ready' : 'pending'\" />\r\n        </div>\r\n        <div class=\"progress-item\">\r\n          <strong>伽罗瓦密钥:</strong> {{ progress.galois_keys.completed_keys }}/{{ progress.galois_keys.total_keys }}\r\n          <StatusBadge :status=\"progress.galois_keys.ready ? 'ready' : 'pending'\" />\r\n        </div>\r\n        <div class=\"progress-item\">\r\n          <strong>重线性化密钥:</strong> \r\n          <span v-if=\"progress.relinearization_key.round1_ready\">R1✓</span>\r\n          <span v-if=\"progress.relinearization_key.round2_ready\">R2✓</span>\r\n          <StatusBadge :status=\"progress.relinearization_key.ready ? 'ready' : 'pending'\" />\r\n        </div>\r\n      </div>\r\n      <div class=\"overall-progress\">\r\n        <strong>总体进度:</strong> {{ progress.overall_progress }}%\r\n        <StatusBadge :status=\"progress.all_keys_ready ? 'ready' : 'pending'\" />\r\n      </div>\r\n    </div>\r\n    \r\n    <!-- 密钥测试 -->\r\n    <div class=\"test-section\">\r\n      <button @click=\"testAll\" :disabled=\"loading || !progress?.all_keys_ready\">\r\n        {{ loading ? '测试中...' : '测试所有密钥' }}\r\n      </button>\r\n      <KeyTestResultTable v-if=\"results\" :testResults=\"results\" />\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { testKeys, getKeyProgress } from '@/api/coordinator'\r\nimport KeyTestResultTable from '@/components/KeyTestResultTable.vue'\r\nimport StatusBadge from '@/components/StatusBadge.vue'\r\n\r\nexport default {\r\n  name: 'KeyTest',\r\n  components: { KeyTestResultTable, StatusBadge },\r\n  data() {\r\n    return {\r\n      results: null,\r\n      loading: false,\r\n      progress: null\r\n    }\r\n  },\r\n  async mounted() {\r\n    await this.fetchProgress()\r\n  },\r\n  methods: {\r\n    async fetchProgress() {\r\n      try {\r\n        const res = await getKeyProgress()\r\n        this.progress = res.data\r\n      } catch (e) {\r\n        console.error('获取密钥进度失败:', e)\r\n      }\r\n    },\r\n    async testAll() {\r\n      this.loading = true\r\n      try {\r\n        const res = await testKeys({ \r\n          test_types: ['public_key', 'relinearization_key', 'galois_keys'] \r\n        })\r\n        this.results = res.data.test_results\r\n      } catch (e) {\r\n        alert('测试失败: ' + (e.response?.data?.message || e.message))\r\n      } finally {\r\n        this.loading = false\r\n      }\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.progress-section {\r\n  background: #f5f5f5;\r\n  padding: 20px;\r\n  border-radius: 8px;\r\n  margin-bottom: 20px;\r\n}\r\n.progress-grid {\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\r\n  gap: 15px;\r\n  margin: 15px 0;\r\n}\r\n.progress-item {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 10px;\r\n}\r\n.overall-progress {\r\n  margin-top: 15px;\r\n  padding-top: 15px;\r\n  border-top: 1px solid #ddd;\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 10px;\r\n}\r\n.test-section {\r\n  margin-top: 20px;\r\n}\r\n</style>\r\n"],"mappings":"AA4CA,SAASA,QAAQ,EAAEC,cAAa,QAAS,mBAAkB;AAC3D,OAAOC,kBAAiB,MAAO,qCAAoC;AACnE,OAAOC,WAAU,MAAO,8BAA6B;AAErD,eAAe;EACbC,IAAI,EAAE,SAAS;EACfC,UAAU,EAAE;IAAEH,kBAAkB;IAAEC;EAAY,CAAC;EAC/CG,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,OAAO,EAAE,IAAI;MACbC,OAAO,EAAE,KAAK;MACdC,QAAQ,EAAE;IACZ;EACF,CAAC;EACD,MAAMC,OAAOA,CAAA,EAAG;IACd,MAAM,IAAI,CAACC,aAAa,CAAC;EAC3B,CAAC;EACDC,OAAO,EAAE;IACP,MAAMD,aAAaA,CAAA,EAAG;MACpB,IAAI;QACF,MAAME,GAAE,GAAI,MAAMZ,cAAc,CAAC;QACjC,IAAI,CAACQ,QAAO,GAAII,GAAG,CAACP,IAAG;MACzB,EAAE,OAAOQ,CAAC,EAAE;QACVC,OAAO,CAACC,KAAK,CAAC,WAAW,EAAEF,CAAC;MAC9B;IACF,CAAC;IACD,MAAMG,OAAOA,CAAA,EAAG;MACd,IAAI,CAACT,OAAM,GAAI,IAAG;MAClB,IAAI;QACF,MAAMK,GAAE,GAAI,MAAMb,QAAQ,CAAC;UACzBkB,UAAU,EAAE,CAAC,YAAY,EAAE,qBAAqB,EAAE,aAAa;QACjE,CAAC;QACD,IAAI,CAACX,OAAM,GAAIM,GAAG,CAACP,IAAI,CAACa,YAAW;MACrC,EAAE,OAAOL,CAAC,EAAE;QACVM,KAAK,CAAC,QAAO,IAAKN,CAAC,CAACO,QAAQ,EAAEf,IAAI,EAAEgB,OAAM,IAAKR,CAAC,CAACQ,OAAO,CAAC;MAC3D,UAAU;QACR,IAAI,CAACd,OAAM,GAAI,KAAI;MACrB;IACF;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}